# Multi-stage Builds If you need to install development dependencies or run build steps like npm run build for React, you can use multi-stage builds. This separates the build environment from the runtime environment, resulting in a smaller final image.
# # Build Stage
# FROM node:20-alpine AS builder
# WORKDIR /app
# COPY package*.json ./
# RUN npm install
# COPY . .
# RUN npm run build

# # Production Stage
# FROM node:20-alpine
# WORKDIR /app
# COPY --from=builder /app/build ./build
# RUN addgroup -S app && adduser -S app -G app
# RUN chown -R app:app /app
# USER app
# EXPOSE 5173
# CMD ["npx", "serve", "-s", "build"]
# ------------------------------------

# Base Image
# This uses the Node.js 20 image with the Alpine Linux distribution. Alpine is a lightweight Linux distribution, making the resulting Docker image smaller.
#FROM node:20-alpine

# In general, using an LTS version like (node:lts-alpine) is often the more recommended way for production environments to minimize risks and ensure long-term support.
#ARG NODE_VERSION=lts
ARG NODE_VERSION=20

FROM node:${NODE_VERSION}-alpine

# Set environment variables to avoid issues with npm global installs
#ENV NODE_ENV=production

# create a user with permissions to run the app
# -S -> create a system user
# -G -> add the user to a group
# This is done to avoid running the app as root
# If the app is run as root, any vulnerability in the app can be exploited to gain access to the host system. It's good practice to run the app as a non-root user
#RUN addgroup -S app && adduser -S app -G app
#RUN addgroup app && adduser -S -G app app

# Working Directory
# Sets the working directory inside the CONTAINER (not the host) where files will be copied and commands will be executed.
WORKDIR /app

# Copy Package Files
# Copies the `package.json` and `package-lock.json` files to the working directory. These files contain information about project dependencies.
# Copy package.json and package-lock.json to the working directory
# Critical, it is important this is before COPY . . due to how caching and layering
# works. Docker checks when rebuilding image if any files have changed, if not,
# will not bother running that command. This will make it so run npm install will
# not install all dependencies every time, only if package.json file is updated will
# it rebuild dependencies. Otherwise will just utilize cache layer.
COPY package*.json .

# Install Dependencies
# Installs the project dependencies specified in `package.json`.
RUN npm install  --loglevel verbose
# Install dependencies only for production to reduce image size
# RUN npm install --only=production

# Copy Project Code
# Copies the entire project code from the local directory to the container's working directory.
COPY . .

# Change ownership of app files to the non-root user
# chown -R <user>:<group> <directory>
# chown command changes the user and/or group ownership of for given file.
#RUN chown -R app:app /app

# Set the user to the non-root user created
#USER app

# Expose the port the app runs on
EXPOSE 8000

# Set the environment variable for the app's port
#ENV PORT 8000

# Start the Application
# Specifies the command that will be executed when the container starts. In this case, it runs the "npm run dev" command. Ensure that the npm run dev command has the --host command to expose the port. Should like something similar to  "dev": "vite --host",
# command to run the app
CMD ["npm", "start"] 
# Can also write as follows.
# CMD npm run dev 
# CMD ["npm", "start"]


# ------------------------------------

# 1. TO BUILD IMAGE, IN TERMINAL RUN COMMAND:
#   - docker build -t docker-react-vite-proj:latest .

# Note - Check image exists with "docker images" command

# 2. TO CREATE/RUN CONTAINER FROM IMAGE, IN TERMINAL RUN COMMAND:
#  - docker run -d --name docker-react-vite-proj-container -p 5173:5173 docker-react-vite-proj:latest

#  - docker run -d --name docker-react-vite-proj-container -p 5173:5173 -v "C:\Users\Syed\Documents\Applications\DockerExamples\docker-react-vite-project\src:/app/src" -v /app/node_modules docker-react-vite-proj:latest


# Explaination of above. Need to do "/${PWD}" to prevent the ";C" being added when being mounted. The volume bind mount allows it so that when you make any changes in the /dist folder to index.html etc, and save, immediately if you refresh the localhost it will reflect those changes. Note must be "/${PWD}" and not "/${pwd}" Reference: https://stackoverflow.com/a/50608818

# ------------------------------------
# Tip - If container already exists, no need to execute the docker run command, instead just start the container and check logs this way
#   - docker start nodejs-express-proj && docker logs --since 1s -f nodejs-express-proj
# * Note - docker start does not not automatically show logs so have to run additional command to show logs. adding "-f" shows logs in real time as they are generated *

# ------------------------------------
# PUBLISH DOCKER IMAGE TO DOCKERHUB 
# If you want to Upload/Push image to DockerHub Repository, must update Tag and add Docker Account UN
#   - docker tag nodejs-express-proj-img snasir95/nodejs-express-proj-img
# Then to push image to DockerHub
#   - docker push snasir95/nodejs-express-proj-img