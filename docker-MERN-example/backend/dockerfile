# Multi-stage Builds If you need to install development dependencies or run build steps like npm run build for React, you can use multi-stage builds. This separates the build environment from the runtime environment, resulting in a smaller final image.
# # Build Stage
# FROM node:20-alpine AS builder
# WORKDIR /app
# COPY package*.json ./
# RUN npm install
# COPY . .
# RUN npm run build

# # Production Stage
# FROM node:20-alpine
# WORKDIR /app
# COPY --from=builder /app/build ./build
# RUN addgroup -S app && adduser -S app -G app
# RUN chown -R app:app /app
# USER app
# EXPOSE 5173
# CMD ["npx", "serve", "-s", "build"]
# ------------------------------------

# Base Image
# This uses the Node.js 20 image with the Alpine Linux distribution. Alpine is a lightweight Linux distribution, making the resulting Docker image smaller.
#FROM node:20-alpine

# In general, using an LTS version like (node:lts-alpine) is often the more recommended way for production environments to minimize risks and ensure long-term support.
#ARG NODE_VERSION=lts
ARG NODE_VERSION=20

FROM node:${NODE_VERSION}-alpine

# Set environment variables to avoid issues with npm global installs
#ENV NODE_ENV=production

# Working Directory
# Sets the working directory inside the CONTAINER (not the host) where files will be copied and commands will be executed.
WORKDIR /app

# Copy Package Files
# Copies the `package.json` and `package-lock.json` files to the working directory. These files contain information about project dependencies.
# Copy package.json and package-lock.json to the working directory
# Critical, it is important this is before COPY . . due to how caching and layering
# works. Docker checks when rebuilding image if any files have changed, if not,
# will not bother running that command. This will make it so run npm install will
# not install all dependencies every time, only if package.json file is updated will
# it rebuild dependencies. Otherwise will just utilize cache layer.
COPY package*.json .

# Install Dependencies
# Installs the project dependencies specified in `package.json`.
RUN npm install  --loglevel verbose
# Install dependencies only for production to reduce image size
# RUN npm install --only=production

# Copy Project Code
# Copies the entire project code from the local directory to the container's working directory.
COPY . .

# Expose the port the app runs on
EXPOSE 8000

# Start the Application
CMD ["npm", "start"] 

