# This will get the node image and download it. Alpine is a linux distribution that is very small. Any images with this have a much smaller image file size.
# Can also use Node.js Long-Term Support (LTS) version: node:lts-alpine 
FROM node:20-alpine

# This will Set the working directory for any subsequent ADD, COPY, CMD, ENTRYPOINT, or RUN instructions that follow it in the Dockerfile. NOTE THIS IS FOR THE CONTAINER NOT LOCALHOST.
# Why is it important to set workdir? The WORKDIR command in Dockerfiles sets the working directory for the container. Best practice to always set this, as other images that you pull from might already be setting WORKDIR and if you don't specify, it will by default go to the last instace of WORKDIR which might have been set by another image you are pulling from. In this case "nginx"
WORKDIR /app

# This copies all of the application code from our local directory to the specified "/app" directory we set up above in the container we will create via docker.
# This will copy everything from the current code source, the directory where this Dockerfile is in, (first ".")  and copy it to the container (second ".")
# Very frequently used to copy every code file from root directory to the container destination. As we have specified "/app" in the container that is where it will be placed.
# first "." is current. Second "." is container.
COPY . .

# SPECIFY THE COMMAND THIS ALWAYS TYPICALLY COMES as the last instruction. Only 1 instruction of CMD can be there in a DockerFile
# after CMD is stated, then its just any terminal command you need to run. Similar to RUN but CMD is the last command. It also tells Docker
# that now they need to build the image or create it.

CMD node app.js  


# ------------------------------------

# 1. TO BUILD IMAGE, IN TERMINAL RUN COMMAND:
#   - docker build -t simple-node-app-img:latest .

# Note - Check image exists with "docker images" command

# 2. TO CREATE/RUN CONTAINER FROM IMAGE, IN TERMINAL RUN COMMAND:
#   - docker run --name simple-node-app simple-node-app-img:latest

# Note - add "--rm" right after docker run if you want to automatically remove the container after it finishes running the program.

# Note - Check if container is running with "docker ps" or for stopped containers "docker ps -a".

# ------------------------------------
# Tip - If container already exists, no need to execute the docker run command, instead just start the container and check logs this way
#   - docker start simple-node-app && docker logs --since 1s -f simple-node-app
# * Note - docker start does not not automatically show logs so have to run additional command to show logs. adding "-f" shows logs in real time as they are generated *

# ------------------------------------
# PUBLISH DOCKER IMAGE TO DOCKERHUB 
# If you want to Upload/Push image to DockerHub Repository, must update Tag and add Docker Account UN
#   - docker tag simple-node-app-img snasir95/simple-node-app-img
# Then to push image to DockerHub
#   - docker push snasir95/simple-node-app-img